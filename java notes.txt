	Arshad  Rohit	Pratik  Kunal SriLaxmi Hemlatha Irfana Tejaswini Sumita Vinay Nandish Rohit
	|
Jayant--+
	|
	Nischal Prince Shrilekha Gaurav Abhishek Yash Vachaspati Dipesh Pushpendra Karan




		Enterprise Applications

	7 features of enterprise applications


	ENTEPRRISE APPLICATION SERVER
	--------------------------------

	ORACLE WEBLOGIC - 5
	A	B	C	D	E

	IBM WEBSPHERE - WAS
	REDHAT - JBoss


	Spring framework - open source 
	A B E

	A B D

1. Remote capability of an application

	socket programming

	ServerSocket s = new ServerSocket();
	|
	Socket s = new Socket();

2. High availability of the application
	24 X 7 
	clustering 

3. Multithreading

	airindia.com	-> AI121 one flight - 200 seats 22.30pm
	|
	1 Mumbai 
	  To
	  London
	2 Date : 10-June-2022
	3 class : First Class	
	4 one way 
	SEARCH FLIGHT
	
		Flight f = new Flight("AI121",197);
	
4. POOLing of resources 
	"same type of requirement" by many customers

5. CACHing of resources
	customer is identified by its primary key - CIN

		Customer c1 = new Customer(email,phone,....);
		Customer c2 = new Customer(email,phone,....);
		Customer c3 = new Customer(email,phone,....);

		Customer c4 = new Customer(email,phone,....);
		Customer c5 = new Customer(email,phone,....);


		Ticket t1 = new Ticket();
		Ticket t2 = new Ticket();
		Ticket t3 = new Ticket();
	
6. Transaction management - A C/C I/I  D

7. Security management - https / TLS







	NSE - nse.it	 nse tech

	icici - 3 i infotech

	product + services

			who
			|DBA/analyst/tester/coder/deployer
		---------------------
		|		|
		where		when
		|?		|?
	-------------------------------------
	|		|		|
	why		what		how
	|		|		|
	reason		information	coding/implementation


https://github.com/vishhaldawane/SBITO4


Project
--------
6 layers

1. DATABASE layer
2. POJO layer - plain old java object
3. DAO layer / repository layer 

4. Service layer - business logic 

5. Controller - spring boot
6. UI - Angular - IDLI

	7 Habits of highly effective people

	1. Be proactive
	2. Begin with the "end in mind"
	3. Put first thing first



		Java programming language
				|
		-------------------------------------
		|		|		|
		JSE		JEE		JME
		|		|		|
		standard	enterprise	micro
		|		|			
		corejava	----------
		|		|	|
	---------------		ORM	CDI	
	|		Hibernate/JPA	Spring
language fundamentals			Spring JDBC
OOPS concepts				Spring JPA
isA hasA usesA producesA		Spring WEB
packages				Spring REST
exception handling
multithreading
generics
collections
file handling
jdbc







				



















	Course for 25 days
	3 days for the project case study implementation

	Core Java
	SQL
	Angular
	Hibernate
	Spring
	

	Nomura - Lehman Brothers  27 years


	MS	Sun
		Oracle	IBM	  HP		Apple	<-providers	ANY	ANY
CPU	Intel	SPARC	BlackBox  hpseries	PowerPC <-- tangible	ANY	ANY
OS	Windows	Solaris	AIX	  Hp-UX		Macintosh <--OS		ANY - linux	
VM	JVM	JVM	JVM	  JVM		JVM			JVM
	|
	Greeting.java
	|
	Greet.class ->	->	->		->			->			???

	
	1. JAVA IS wora/simple
	2. 100% OBJECT ORIENTED
	3. 100% Secured - Sandbox 
			no direct memory access
			- pointers   
	4. Robust - ability to perform "garbage" collection
			ability to handle exceptions
	5. Multithreaded
	6. Dynamic - runtime objects
	7. Distributed

		JVM			JVM
DB		|			|		1
 |		servercode		client code -> withdraw(){}
 |BL	4	|			 withdraw(){}
 withdraw()<----ATMSERVER<------------ATMClient
		withdraw(){}	
		RMI			RMI

		RPC
	
class SavingsAccount
{
  float balance;

  void withdraw(float amt) {
   balance = balance - amt;
  }

}

----------------------------------------------------
4 types of functions in any programming language

	function without argument and without return value
	1. void calcSimpleInterest() 
	   {
		float si;
		float p=5000;  int n=5; float r=6.8f;
		si = (p*n*r)/100;
		sop(si);
           }

	function with arguments and without return value
	2. void fun(float p, int n, float r) 
	   {
		float si = (p*n*r)/100;
		sop(si);
           }

	function with arguments and with return value
	3. float fun(float p, int n, float r) 
	   {
		return (p*n*r)/100;
           }

	4. float fun() 
	   {
		float p=5000;  int n=5; float r=6.8f;
		return (p*n*r)/100;
           }






Formula of creation 

	assignment
	---------------
	think + feel  = action + result
	invisible	visible
	electricity
	|

	class Cricketer
	{
		void hitSixer() {

		}
	}


	Food rice = new Food();
	rice.eat();

	class Food
	{
		void eat() {

		}
	}
	


	class SavingsAccount
	{
		void withdraw() {

		}
	}



		DATA TYPES
			|
			-------------------------------------
			|				|
		primitive			Secondary
			|				|
   ---------------------------------------	--------------------
      |		| 	|	 |		|
Integral  Floating   Character	Boolean		Object
      |		|	|	 |		    |
byte  1	  float  4	char 2  boolean 1 	String
short 2	  double 8	UNICODE	 default is	"new york"
int   4				 false		"new mumbai"
long  8

		int i=10; 			<-- primitive
		Integer i = new Integer(10);     <-- Object way 

		Cricketer c = new Cricketer();


	byte - Byte
	short - Short
	int	- Integer
	long	- Long
	float	-Float
	double	- Double
	boolean - Boolean

	
	Bottle b1 = new Bottle();
	Bottle b2 = new Bottle();
	Bottle b3 = new Bottle();
	Bottle b4 = new Bottle();
	Bottle b5 = new Bottle();



class Bottle
{
	int length;
	int capacity;
	int size; 
	String color;
	String material;
	int weight;
	
	printDetails() { }	

}

Class design
---------------
	object = physical state + behaviour
			|		|
			acno
			acname
			acbalance	withdraw() { }, deposit() { }
					printBalance() { }
					listenBalance() { }

	object = data + functions


		class		vs		object
		|				|
	design of an object		instance of a class
		|				|
	just a plain text file		memory activity 
		|				|
		logical				physical

class SavingsAccount		SavingsAccount saObj = new SavingsAccount();
{
	data
	+
	void withdraw() {}
	void deposit() { }
	void transfer() { }
	void printAccount() { }
}

class BankAccount
{
	data ( acno,acname,acbal)
	 +
	methods		  setBankAccount(....) {}  
	/functions	   printBankAccount() { } 

}


		

BankAccount bankAccObj1 = new 	BankAccount();
 |		|	  |		|
classname  refToObject  Allocator	constructor 

		STACK			HEAP
		|			|
		local variables		data structure of the classes
		
					DATA AREA OF BANKACCOUNT

				accountNumber   accountHolderName accountBalance
				-------------------------------------------------
				|  101		| Jack		 | 5000		|
				-------------------------------------------------
	    +------------------->100
	    |
	+---|---+			METHOD / FUNCTION AREA
	| 100	|		
	+-------+			setBankAccount(x,y,z) { }
	bankAccObj1			printBankAccount() { }


				accountNumber   accountHolderName accountBalance
				-------------------------------------------------
				| 102		| Jane		 | 6000		|
				-------------------------------------------------
	    +------------------->200
	    |
	+---|---+			
	| 200	|		
	+-------+		
	bankAccObj2	


				accountNumber   accountHolderName accountBalance
				-------------------------------------------------
				| 103		| Smith		 | 7000		|
				-------------------------------------------------
	    +------------------->300
	    |
	+---|---+			
	| 300	|		
	+-------+		
	bankAccObj3	







	Cricketer cricketerObj1  = new Cricketer();
	cricketerObj1.cricketerName =  "Sachin Tendulkar"



	class Cricketer
	{
		int cricketerRank;
		String cricketerName;
		int age;

		void hitSixer() { }
		void hitFour() { }
	}

	innovate a class 
	with data and relevant function

	BankAccount = acno,name,bal + setBa, print, withdraw,deposit

	INNOVATE a class
	which would be a unique creation among all of us

----------------------------------------------------------------

	Constructor


		- is a special code block
		that has the same name as of the 
		enclosing class

		- it DOESNOT have return type

		- it is executed "automatically" during the
		object creation process

		- initialize the data of the object


		class Account
		{
			Account() 
			{
 
			}
		}

		Account a = new Account();

		-every class in java comes with a 
		default constructor/implicit no-arg ctor

		you can have either the implicit or explicit
		but not both


		- a ctor can take arguments
		
		class A
		{
			int x;

			A(int p) {
				x = p;
			}
			void foo() { }

		}








	OOPS concepts
	------------------


	1. Abstraction
		it is the "what is?" part of an object
		"what is" an ATM?

		hiding the complexity of an object 
		and providing its USAGE via simple accessible 
		functions

		- data abstraction 		- private
		- procedural abstraction	- private
		- class abstraction


	2. Encapsulation

		Binding of data with concerned functions
		- private data with public functions
		


	3. Polymorphism

		- ability of business entity to have multiple forms

		a. class extention
			

			BankAccount
			|acno,name,balance
		--------------------------------------------
		|		|		|
	SavingsAccount	CurrentAccount 	 CreditAccount 
	|rate		 overDraftLimit		 creditLimit,cashLimit
	|
FixedDepositAccount
	|compoundInterest




	
	4. Inheritance

	5. Object communication


-----------------------------------------------------------------

Inheritance
	- reuse the code




	A
	| single-level
	B
	| multi-level
	C

	A	B	C
	|	|	| multiple-level
	-----------------
		|
		D


			Inheritance
			|
	---------------------------
	|			|
	Derivation		Implementation
	|			|
	normal class		abstract class/interface
	A			A
	|			|
	B			B

  class A			abstract class A	interface A
  {				{			{
  
  }				}			}
  class B extends A		class B extends A	class B implements A
  {				{			{

  }				}			}













	Person
	| age,gender,name
	|
	Student
	| rollno,grade, stream
	|
	Employee
	  empno,desg,dept, salary



	
	super() - to invoke ctor of the nearest super class
	super.  - to invoke any function/data of the nearest super class

	this() - to invoke ctor of the same class
	this.  - to refer the function/data of the same class



		Point2D
		| x,y
	----------------------------
	|		|
	Point3D		ColouredPoint2D
	|z		| color
	|
ColouredPoint3D
	|color




	Object
	|isA
	Person
	| gender, age, name
	| Address homeAddress;
	| Address corrAddress;
--------------------------
		|isA
		Student
		| rollno, collegeName, stream, 
		|
	--------------------------
			|isA
			Employee
			| empno, companyName, designation, salary




	hasA - relationship

	containment - composition

	class WholeEntity
	{
		PartEntity pe = new PartEntity();

	}

	class Vehicle
	{

	}

	class Car extends Vehicle //isA
	{
		Engine e= new Engine(); //hasA - vital  part

	}


	class Heart
	{

	}

	class Mammal
	{

	}

	class Human extends Mammal
	{
		Heart h = new Heart(); //hasA
		Lung l1 = new Lung(); //hasA
		Lung l2 = new Lung(); //hasA
		Kidney k1 = new Kidney(); //hasA
		Kidney k2 = new Kidney(); //hasA

	}

------------------------------------------------------

	Passing "Object" as parameter to a function

	Returning "Object" as a return value from a function





	Innovate a unique program
	to complete the association

	isA	hasA	usesA	producesA


	class Machine {
		int serialNumber;
		ctor/set/get/toString
	}
	class WashingMachine extends Machine //isA
	{
		String brandName;
		int capacity;
		WashingTub washTub = new WashingTub(); //hasA

		Laundry wash(Cloth c, Water w, Electricity e, WashingPowder wp)
		{
			..
			..
			..
			Laundry laundry = new Laundry();
			return laundry;
		}
	}
	class WashingTub { }
	class Cloth { }
	class Water  { }
	class Electricity { }
	class WashingPowder { }
	class Laundry { }




		final		static		abstract

============================================================
field		is a constant	SHARABLE	NA
		cannot be	data across
		changed		all the objects
				of the class
------------------------------------------------------------
method		cannot be	to refer the	partial contract
		overridden	other static	of a class
				members
------------------------------------------------------------
class		cannot be			may have partial
		extended			contract
------------------------------------------------------------



	non-static			static
	fields				fields
	|				|
	object's member			class's member


		abstract = incomplete


	abstract class GeometricalShape
	{
		
	}

	class Circle extends GeometricalShape //isA
	{
		void draw()
		{

		}
	} 
		

			GeometricalShape
			| 3 methods are here- declared as abstract 
		---------------------
		|		|
		Circle		Square
		|radius		|side
		|		|
		Ellipse		Rectangle <=== 
		vRadius		  side2





	MusicalInstrument
		|play();		
	----------------------
	|		|
StringBased		AirBased
MusicalInstrument	MusicalInstrument
	|tuneStr();	  |checkAir();
-----------------	---------------
|	 |		|	|
Guitar	 Violin		Flute	Trumpet
|	 |		|	|
Electric Cello		
Guitar




	Electricity 

Interfaces
---------------
	- pure type

	- pure abstract class

	- can only have abstract methods

	- it cannot have non-abstract methods

	- by default methods in this are public, abstract

	- by default fields in this are public final and static






					Instrument
					| use();
	--------------------------------------------------------------------------------------------------------
	|			|		|				|			|
MusicalInstrument	MedicalInstrument	ElectricalInstrument	ElectronicInstrument  MechanicalInstrument ......
    |	play();			|		|
------------------	-----------------
|	|	|	|	|
SBMI	ABMI	DBMI	SMI	PMI
|tune()	|	|	|	|
Guitar Flute	Dhol	Cutter GlucoMeter
pluck();
Violin				ECGMachine



	Living
	|
	Person
	|	   Studying	Chatting	Solving
	---------   |		|		|	
		|   -----------------------------
		|     |	
		Student
		|		Working	SigningIn	SigningOut
		-----------------  |	  |		 |
				|  ------------------------
				|    |
				Employee










		GeometricalShape
			| 3 methods are here- declared as abstract 
		---------------------
		|		|
		Ellipse		Rectangle
		|radius		|side,side2
		|vradius	|
		|		|
		Circle		Sqaure







